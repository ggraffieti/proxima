System proxima

Dispatch identificationRequest : identificationRequest
Dispatch identificationResponse : identificationResponse(ID)
Dispatch dataRequest : dataRequest(DOCTOR_ID, PATIENT_ID)
Dispatch dataResponse : dataResponse(DOCTOR_ID, PATIENT_ID, NAME, SURNAME, BLOOD_GROUP)
Dispatch unauthorized : unauthorized

Event local_start : start

Context ctxAuthDebug ip[host="localhost" port=1406 ]
//Context ctxPatient ip[host="localhost" port=1406] -g white
//Context ctxDoctor ip[host="localhost" port=6041] -g blue
//Context ctxControl ip[host="localhost" port=6042] -g yellow

QActor qpatient context ctxAuthDebug {
	Rules {
		identifier(patient1).
	}
	
	Plan init normal
	[
		println("[qpatient] started!")
	]
	switchTo waitForRequest
	
	Plan waitForRequest 
	[
		println("[qpatient] waiting for request")
	]
	transition stopAfter 20000
			   whenMsg identificationRequest -> handleIdentificationRequest
			   finally repeatPlan
	
	Plan handleIdentificationRequest resumeLastPlan
	[
		println("[qpatient] handling identification request");
		[!? identifier(ID)] replyToCaller -m identificationResponse : identificationResponse(ID)
	]
}

QActor qpatient2 context ctxAuthDebug {
	Rules {
		identifier(patient2).
	}
	
	Plan init normal
	[
		println("[qpatient2] started!")
	]
	switchTo waitForRequest
	
	Plan waitForRequest 
	[
		println("[qpatient2] waiting for request")
	]
	transition stopAfter 20000
			   whenMsg identificationRequest -> handleIdentificationRequest
			   finally repeatPlan
	
	Plan handleIdentificationRequest resumeLastPlan
	[
		println("[qpatient2] handling identification request");
		[!? identifier(ID)] replyToCaller -m identificationResponse : identificationResponse(ID)
	]
}


QActor qdoctor context ctxAuthDebug {
	Rules {
		identifier(doctor1).
		distance(qpatient, 100).
		distance(qpatient2, 150).
	}
	
	Plan init normal
	[
		println("[qdoctor] started!");
		demo consult("./src/it/unibo/qatheory/qDoctorTheory.pl");
		actorOp buildCustomGui("doctorGui")
	]
	switchTo idle
	
	Plan idle 
	[
		println("[qdoctor] waiting for emergency")	
	]
	transition stopAfter 20000
			   whenEvent local_start -> requestPatientIdentifier
	
	Plan requestPatientIdentifier 
	[
		println("[qdoctor] sending identification request to patient");
		[!? findNearest(NAME, _)] forward NAME -m identificationRequest : identificationRequest
	]
	transition stopAfter 2000
			   whenMsg identificationResponse -> handlePatientIdentifierResponse
			   
    Plan handlePatientIdentifierResponse
    [
    	println("[qdoctor] patient identifier read");
    	onMsg identificationResponse : identificationResponse(PATIENT_ID) ->
			addRule patientid(PATIENT_ID)
    ] 
    switchTo sendDataRequest
    
    Plan sendDataRequest
    [
    	println("[qdoctor] sending data request to qcontrol");
    	[!? identifiers(DOCTOR_ID, PATIENT_ID)] 
			forward qcontrol -m dataRequest : dataRequest(DOCTOR_ID, PATIENT_ID)
    ]
    transition stopAfter 2000
    	whenMsg dataResponse -> handleDataResponse,
    	whenMsg unauthorized -> handleUnauthrorizedResponse
    
    Plan handleDataResponse
    [
    	println("[qdoctor] patient data retrieved");
    	onMsg dataResponse : dataResponse(DOCTOR_ID, PATIENT_ID, NAME, SURNAME, BLOOD_GROUP) -> 
    		addRule dataResponse(DOCTOR_ID, PATIENT_ID, NAME, SURNAME, BLOOD_GROUP)
    ] switchTo showPatientData
    
    Plan showPatientData
    [
    	println("[qdoctor] showing patient data");
    	[!? dataResponse(_, _, NAME, SURNAME, BLOOD_GROUP)] actorOp showDataOnGUI(NAME, SURNAME, BLOOD_GROUP)
    ] 
    switchTo idle
    
    Plan handleUnauthrorizedResponse 
    [
    	println("[qdoctor] unauthorized");
    	addRule unauthorized
    ]
    switchTo showUnauthorizedMessage
    
    Plan showUnauthorizedMessage
    [
    	println("[qdoctor] showing unauthorized message");
    	actorOp showUnauthorizedMessageOnGUI
    ]
    switchTo idle
}

QActor qcontrol context ctxAuthDebug {
	Rules {
		data(patient2, jane, doe, a_positive).
		data(patient1, john, doe, ab_negative).
		
		doctor(doctor10).
		doctor(doctor2).
	}
	
	Plan init normal 
	[
		demo consult("./src/it/unibo/qatheory/qControlAuthTheory.pl");
		println("[qcontrol] started!")
	]
	switchTo waitForRequest
	
	Plan waitForRequest
	[
		println("[qcontrol] waiting for request")
	]
	transition stopAfter 20000
			   whenMsg dataRequest -> handleRequest
			   finally repeatPlan
			   
    Plan handleRequest resumeLastPlan 
    [
		println("[qcontrol] handling data request");
		onMsg dataRequest : dataRequest(DOCTOR_ID, PATIENT_ID) -> 
			addRule request(DOCTOR_ID, PATIENT_ID);
		[!? authorized(DOCTOR_ID, PATIENT_ID)]
			println("[qcontrol] doctor authorized")
		else
			replyToCaller -m unauthorized : unauthorized;
		[!? response(DOCTOR_ID, PATIENT_ID, NAME, SURNAME, BLOOD_GROUP)]
			replyToCaller -m dataResponse : dataResponse(DOCTOR_ID, PATIENT_ID, NAME, SURNAME, BLOOD_GROUP);
		removeRule request(X, Y)
    ]
}
