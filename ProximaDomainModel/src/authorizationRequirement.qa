System proxima

Dispatch identificationRequest : identificationRequest
Dispatch identificationResponse : identificationResponse(PATIENT_ID)
Dispatch dataRequest : dataRequest(DOCTOR_ID, PATIENT_ID)
Dispatch dataResponse : dataResponse(DOCTOR_ID, PATIENT_ID, NAME, SURNAME)
Dispatch unauthorized : unauthorized

Context ctxDebug ip[host="localhost" port=1406]
/*Context ctxPatient ip[host="localhost" port=1406] -g white
Context ctxDoctor ip[host="localhost" port=6041] -g blue
Context ctxControl ip[host="localhost" port=6042] -g yellow*/

QActor qpatient context ctxDebug {
	Rules {
		identifier(patient1).
	}
	
	Plan init normal
	[
		println("[qpatient] started!");
		[?? identifier(K)] actorOp createIdentifier(K)
	]
	switchTo waitForRequest
	
	Plan waitForRequest 
	[
		println("[qpatient] waiting for request")
	]
	transition stopAfter 10000
		whenMsg identificationRequest -> handleIdentificationRequest
	    finally repeatPlan
	
	Plan handleIdentificationRequest resumeLastPlan
	[
		println("[qpatient] handling identification request");
		actorOp getIdentifier;
		[?? actorOpDone(OP, RESULT)] 
			replyToCaller -m identificationResponse : identificationResponse(RESULT)
	]
}

QActor qpatient2 context ctxDebug {
	Rules {
		identifier(patient2).
	}
	
	Plan init normal
	[
		println("[qpatient2] started!");
		[?? identifier(K)] actorOp createIdentifier(K)
	]
	switchTo waitForRequest
	
	Plan waitForRequest 
	[
		println("[qpatient2] waiting for request")
	]
	transition stopAfter 10000
			   whenMsg identificationRequest -> handleIdentificationRequest
			   finally repeatPlan
	
	Plan handleIdentificationRequest resumeLastPlan
	[
		println("[qpatient2] handling identification request");
		actorOp getIdentifier;
		[?? actorOpDone(OP, R)] replyToCaller -m 
							identificationResponse : identificationResponse(R)
	]
}

QActor qdoctor context ctxDebug {
	Rules {
		identifier(doctor1).
		distance(qpatient, 80).
		distance(qpatient2, 10).
	}
	
	Plan init normal
	[
		println("[qdoctor] started!");
		demo consult("./src/it/unibo/qatheory/qDoctorTheory.pl");
		[?? identifier(K)] actorOp createIdentifier(K)
	]
	switchTo readIdentifier
	
	Plan readIdentifier
	[
		actorOp getIdentifier;
		delay 500;
		println("[qdoctor] personal identifier read");
		[?? actorOpDone(OP, RESULT)] addRule identifier(RESULT)
	]
	switchTo requestPatientIdentifier
	
	Plan requestPatientIdentifier 
	[
		println("[qdoctor] sending identification request to qpatient");
		[!? findNearest(NAME, _)] forward NAME -m identificationRequest : identificationRequest
	]
	transition stopAfter 2000
		whenMsg identificationResponse -> handlePatientIdentifierResponse
			   
    Plan handlePatientIdentifierResponse
    [
    	println("[qdoctor] qpatient identifier read");
		onMsg identificationResponse : identificationResponse(PATIENT_ID) ->
			addRule patientid(PATIENT_ID)	
    ]
    switchTo sendDataRequest
    
    Plan sendDataRequest
    [
    	println("[qdoctor] sending data request to qcontrol");
    	[?? identifiers(DOCTOR_ID, PATIENT_ID)] 
			forward qcontrol -m dataRequest : dataRequest(DOCTOR_ID, PATIENT_ID)
    ]
    transition stopAfter 2000
    	whenMsg dataResponse -> handleDataResponse,
    	whenMsg unauthorized -> handleUnauthrorizedResponse
    
    Plan handleDataResponse
    [
    	println("[qdoctor] patient data retrieved");
    	onMsg dataResponse : dataResponse(DOCTOR_ID, PATIENT_ID, NAME, SURNAME) -> 
    		println(data(DOCTOR_ID, PATIENT_ID, NAME, SURNAME))
    ]
    
    Plan handleUnauthrorizedResponse 
    [
    	println("[qdoctor] unauthorized")
    ]
}

QActor qcontrol context ctxDebug {
	Rules {
		data(patient2, jane, doe).
		data(patient1, john, doe).
		
		doctor(doctor1).
		doctor(doctor2).
	}
	
	Plan init normal 
	[
		demo consult("./src/it/unibo/qatheory/qControlAuthTheory.pl");
		println("[qcontrol] started!")
	]
	switchTo waitForRequest
	
	Plan waitForRequest
	[
		println("[qcontrol] waiting for request")
	]
	transition stopAfter 10000
		whenMsg dataRequest -> handleRequest
		finally repeatPlan
			   
    Plan handleRequest resumeLastPlan 
    [
		println("[qcontrol] handling data request");
		onMsg dataRequest : dataRequest(DOCTOR_ID, PATIENT_ID) -> 
			addRule request(DOCTOR_ID, PATIENT_ID);
		[!? authorized(DOCTOR_ID, PATIENT_ID)]
			println("[qcontrol] doctor authorized")
		else
			replyToCaller -m unauthorized : unauthorized;
		[?? response(DOCTOR_ID, PATIENT_ID, NAME, SURNAME)]
			replyToCaller -m dataResponse : dataResponse(DOCTOR_ID, PATIENT_ID, NAME, SURNAME);
		removeRule request(X, Y)
    ]
}
