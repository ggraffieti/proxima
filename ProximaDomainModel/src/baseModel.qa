System proxima

Dispatch identificationRequest : identificationRequest
Dispatch identificationResponse : identificationResponse(I)
Dispatch dataRequest : dataRequest(RESCUER_ID, PATIENT_ID)
Dispatch dataResponse : dataResponse(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP)

Event local_start : start

Context ctxBaseDebug ip[host="localhost" port=1406 ]

QActor qpatient context ctxBaseDebug  {
	Rules {
		identifier(patient1).
	}
	
	Plan init normal
	[
		println("[qpatient] started!")
	]
	switchTo waitForRequest
	
	Plan waitForRequest 
	[
		println("[qpatient] waiting for request")
	]
	transition stopAfter 10000
			   whenMsg identificationRequest -> handleIdentificationRequest
			   finally repeatPlan
	
	Plan handleIdentificationRequest resumeLastPlan
	[
		println("[qpatient] handling identification request");
		[!? identifier(K)] replyToCaller -m identificationResponse : identificationResponse(K)
	]
}

QActor qpatient2 context ctxBaseDebug {
	Rules {
		identifier(patient2).
	}
	
	Plan init normal
	[
		println("[qpatient2] started!")
	]
	switchTo waitForRequest
	
	Plan waitForRequest 
	[
		println("[qpatient2] waiting for request")
	]
	transition stopAfter 10000
			   whenMsg identificationRequest -> handleIdentificationRequest
			   finally repeatPlan
	
	Plan handleIdentificationRequest resumeLastPlan
	[
		println("[qpatient2] handling identification request");
		[!? identifier(K)] replyToCaller -m identificationResponse : identificationResponse(K)
	]
}


QActor qrescuer context ctxBaseDebug {
	Rules {
		identifier(rescuer1).
		distance(qpatient, 100).
		distance(qpatient2, 150).
	}
	
	Plan init normal
	[
		println("[rescuer] started!");
		demo consult("./src/it/unibo/qatheory/qRescuerTheory.pl");
		actorOp buildCustomGui("rescuerGui")
	]
	switchTo idle
	
	Plan idle 
	[
		println("[qrescuer] waiting for emergency")	
	]
	transition stopAfter 30000
			   whenEvent local_start -> requestPatientIdentifier
	
	Plan requestPatientIdentifier 
	[
		println("[qrescuer] sending identification request to patient");
		[!? findNearest(NAME, _)] forward NAME -m identificationRequest : identificationRequest
	]
	transition stopAfter 2000
			   whenMsg identificationResponse -> handlePatientIdentifierResponse
			   
    Plan handlePatientIdentifierResponse
    [
    	println("[qrescuer] patient identifier read");
    	onMsg identificationResponse : identificationResponse(PATIENT_ID) ->
			addRule patientid(PATIENT_ID)
    ] 
    switchTo sendDataRequest
    
    Plan sendDataRequest
    [
    	println("[qrescuer] sending data request to qcontrol");
    	[!? identifiers(RESCUER_ID, PATIENT_ID)] 
			forward qdatacontrol -m dataRequest : dataRequest(RESCUER_ID, PATIENT_ID)
    ]
    transition stopAfter 2000
    	whenMsg dataResponse -> handleDataResponse
    
    Plan handleDataResponse
    [
    	println("[qrescuer] patient data retrieved");
    	onMsg dataResponse : dataResponse(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP) -> 
    		addRule dataResponse(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP)
    ] switchTo showPatientData
    
    Plan showPatientData
    [
    	[!? dataResponse(_, NAME, SURNAME, BLOOD_GROUP)] actorOp showDataOnGUI(NAME, SURNAME, BLOOD_GROUP)
    ] 
    switchTo idle
}

QActor qdatacontrol context ctxBaseDebug {
	Rules {
		data(patient2, jane, doe, a_positive).
		data(patient1, john, doe, ab_negative).
	}
	
	Plan init normal 
	[
		demo consult("./src/it/unibo/qatheory/qDataControlBaseTheory.pl");
		println("[qdatacontrol] started!")
	]
	switchTo waitForRequest
	
	Plan waitForRequest
	[
		println("[qdatacontrol] waiting for request")
	]
	transition stopAfter 10000
			   whenMsg dataRequest -> handleRequest
			   finally repeatPlan
			   
    Plan handleRequest resumeLastPlan 
    [
    	println("[qdatacontrol] handling request");
		onMsg dataRequest : dataRequest(RESCUER_ID, PATIENT_ID) -> 
			addRule request(PATIENT_ID);
		[!? response(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP)]
			replyToCaller -m dataResponse : dataResponse(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP)
    ]
}
