System proxima

Dispatch identificationRequest : identificationRequest
Dispatch identificationResponse : identificationResponse(ID)
Dispatch dataRequest : dataRequest(RESCUER_ID, PATIENT_ID)
Dispatch dataResponse : encrypted(DATA)
Dispatch unauthorized : unauthorized
Dispatch getData: getData(PATIENT_ID)
Dispatch data: data(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP)

Event local_start : start

Context ctxMITMDebug ip[host="localhost" port=1406 ]

QActor qpatient context ctxMITMDebug {
	Rules {
		identifier(patient1).
	}
	
	Plan init normal
	[
		println("[qpatient] started!")
	]
	switchTo waitForRequest
	
	Plan waitForRequest 
	[
		println("[qpatient] waiting for request")
	]
	transition stopAfter 30000
			   whenMsg identificationRequest -> handleIdentificationRequest
			   finally repeatPlan
	
	Plan handleIdentificationRequest resumeLastPlan
	[
		println("[qpatient] handling identification request");
		[!? identifier(ID)] replyToCaller -m identificationResponse : identificationResponse(ID)
	]
}

QActor qpatient2 context ctxMITMDebug {
	Rules {
		identifier(patient2).
	}
	
	Plan init normal
	[
		println("[qpatient2] started!")
	]
	switchTo waitForRequest
	
	Plan waitForRequest 
	[
		println("[qpatient2] waiting for request")
	]
	transition stopAfter 30000
			   whenMsg identificationRequest -> handleIdentificationRequest
			   finally repeatPlan
	
	Plan handleIdentificationRequest resumeLastPlan
	[
		println("[qpatient2] handling identification request");
		[!? identifier(ID)] replyToCaller -m identificationResponse : identificationResponse(ID)
	]
}

QActor qrescuer context ctxMITMDebug {
	Rules {
		identifier(rescuer1).
		
		connection(false).
		connection(false).
		connection(true).
		connection(true).
		connection(false).
		connection(true).
		connection(true).
		connection(true).
		
		nearest(qpatient).
		nearest(qpatient2).
		nearest(qpatient2).
		nearest(qpatient).
	}
	
	Plan init normal
	[
		println("[qrescuer] started!");
		demo consult("./src/it/unibo/qatheory/qRescuerTheory.pl");
		actorOp buildCustomGui("rescuerGui")
	]
	switchTo checkConnection
	
	Plan checkConnection 
	[
		println("[qrescuer] check connection");
		delay 500;
		[?? connection(STATE)] addRule currentConnection(STATE);
		[?? currentConnection(true)] 
			addRule connectionEstablished(true);
		[?? currentConnection(false)] 
			actorOp showConnectionError
	]
	switchTo [?? connectionEstablished(true)] idle
	finally repeatPlan
	
	Plan idle 
	[
		actorOp showConnectionEstablished;
		println("[qrescuer] waiting for emergency")
	]
	transition stopAfter 30000
			   whenEvent local_start -> requestPatientIdentifier
	
	Plan requestPatientIdentifier 
	[
		removeRule dataResponse(_,_,_,_);
		removeRule unauthorized;
		println("[qrescuer] sending identification request to patient");
		[!? findNearest(NAME)] forward NAME -m identificationRequest : identificationRequest
	]
	transition stopAfter 2000
			   whenMsg identificationResponse -> handlePatientIdentifierResponse
			   
    Plan handlePatientIdentifierResponse
    [
    	println("[qrescuer] patient identifier read");
    	onMsg identificationResponse : identificationResponse(PATIENT_ID) ->
			addRule patientid(PATIENT_ID)
    ] 
    switchTo sendDataRequest
    
    Plan sendDataRequest
    [
    	println("[qrescuer] sending data request to qdatacontrol");
    	[!? identifiers(RESCUER_ID, PATIENT_ID)] 
			forward qmaninthemiddle -m dataRequest : dataRequest(RESCUER_ID, PATIENT_ID)
    ]
    transition stopAfter 2000
    	whenMsg dataResponse -> handleDataResponse,
    	whenMsg unauthorized -> handleUnauthrorizedResponse
    
    Plan handleDataResponse
    [
    	println("[qrescuer] patient data retrieved");
    	onMsg dataResponse : encrypted(DATA) -> 
    		actorOp decryptData(DATA);
		[?? actorOpDone(decryptData(_), dataResponse(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP))]
			addRule dataResponse(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP)
    ] switchTo showPatientData
    
    Plan showPatientData
    [
    	println("[qrescuer] showing patient data");
    	[!? dataResponse(_, NAME, SURNAME, BLOOD_GROUP)] 
    		actorOp showDataOnGUI(NAME, SURNAME, BLOOD_GROUP)
		else
			actorOp showMalformedDataMessage
    ] 
    switchTo checkConnection
    
    Plan handleUnauthrorizedResponse 
    [
    	println("[qrescuer] unauthorized");
    	addRule unauthorized
    ]
    switchTo showUnauthorizedMessage
    
    Plan showUnauthorizedMessage
    [
    	println("[qrescuer] showing unauthorized message");
    	actorOp showUnauthorizedMessageOnGUI
    ]
    switchTo checkConnection
}

QActor qmaninthemiddle context ctxMITMDebug -g gray {
	Rules {
		falsifyData(false).
		falsifyData(true).
		falsifyData(false).
		falsifyData(true).
	}
	
	Plan init normal
	[
		println("[qmaninthemiddle] started!");
		demo consult("./src/it/unibo/qatheory/qManInTheMiddleTheory.pl")
	]
	switchTo eavesdropRequest
	
	Plan eavesdropRequest
	[
		println("[qmaninthemiddle] eavesdropping request")
	]
	transition stopAfter 30000 
		whenMsg dataRequest -> forwardDataRequest
		
	Plan forwardDataRequest
	[
		println("[qmaninthemiddle] forwarding data request to qdatacontrol");
		memoCurrentMessage;
		[?? msg(dataRequest, dispatch, SENDER, _, _, _)]
			addRule rescuerSender(SENDER);
		onMsg dataRequest : dataRequest(RESCUER_ID, PATIENT_ID) -> 
			forward qdatacontrol -m dataRequest : dataRequest(RESCUER_ID, PATIENT_ID)
	]
	switchTo eavesdropResponse
	
	Plan eavesdropResponse
	[
		println("[qmaninthemiddle] eavesdropping response")
	]
	transition stopAfter 2000
		whenMsg dataResponse -> falsifyResponse,
		whenMsg unauthorized -> handleUnauthorizedResponse
		
	Plan falsifyResponse
	[
		onMsg dataResponse : encrypted(DATA) ->
			addRule dataResponse(DATA);
		[!? dataResponse(DATA)] 
			println(DATA);
		[?? falsifyData(VAL)]
			addRule falsify(VAL);
		println("[qmaninthemiddle] changing response");
		[!? falsifiedData(SENDER, DATA)]
			forward SENDER -m dataResponse : encrypted(DATA)
	]
	switchTo eavesdropRequest
	
	Plan handleUnauthorizedResponse
	[
		[?? rescuerSender(SENDER)]
			forward SENDER -m unauthorized : unauthorized
	]
	switchTo eavesdropRequest
}

QActor qdatacontrol context ctxMITMDebug {
	Rules {
		rescuer(rescuer1).
		rescuer(rescuer2).
	}
	
	Plan init normal 
	[
		demo consult("./src/it/unibo/qatheory/MITMqDataControlTheory.pl");
		println("[qdatacontrol] started!")
	]
	switchTo waitForRequest
	
	Plan waitForRequest
	[
		println("[qdatacontrol] waiting for request")
	]
	transition stopAfter 30000
			   whenMsg dataRequest -> handleRequest
			   finally repeatPlan
			   
    Plan handleRequest resumeLastPlan 
    [
		println("[qdatacontrol] handling data request");
		memoCurrentMessage;
		[?? msg(dataRequest, dispatch, SENDER, _, dataRequest(RESCUER_ID, PATIENT_ID), _)] 
			addRule request(SENDER, RESCUER_ID, PATIENT_ID);
		[!? authorized(SENDER, RESCUER_ID, PATIENT_ID)]
			addRule senderRequestData(SENDER, PATIENT_ID)
		else
			replyToCaller -m unauthorized: unauthorized;
		removeRule request(_, _, _)
    ]
    switchTo [!? senderRequestData(_, _)] sendDataRequest
    
    Plan sendDataRequest
    [
    	println("[qdatacontrol] sending data request to qdata");
    	[!? senderRequestData(_, PATIENT_ID)] forward qdata -m getData : getData(PATIENT_ID)  	
    ]
    switchTo waitForResponse
    
    Plan waitForResponse 
    [
    	println("[qdatacontrol] waiting for qdata response")
    ]
    transition stopAfter 2000
    		   whenMsg data -> handleResponse
    		   
    Plan handleResponse
    [
    	println("[qdatacontrol] handling data response");
    	onMsg data : data(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP) ->
    		actorOp encryptData(dataResponse(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP));
		[!? response(SENDER, DATA)]
			forward SENDER -m dataResponse : encrypted(DATA);
    	removeRule senderRequestData(_, _)
    ]
    switchTo waitForRequest
}

QActor qdata context ctxMITMDebug {
	Rules {
		data(patient2, jane, doe, a_positive).
		data(patient1, john, doe, ab_negative).
	}
	
	Plan init normal
	[
		demo consult("./src/it/unibo/qatheory/qDataTheory.pl");
		println("[qdata] started!")
	]
	switchTo waitForRequest
	
	Plan waitForRequest 
	[
		println("[qdata] waiting for request")
	]
	transition stopAfter 30000
			   whenMsg getData -> handleRequest
	finally repeatPlan
			   
	Plan handleRequest resumeLastPlan
	[
		println("[qdata] handling data request");
		onMsg getData : getData(PATIENT_ID) -> addRule request(PATIENT_ID);
		[!? fetchData(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP)] 
			replyToCaller -m data: data(PATIENT_ID, NAME, SURNAME, BLOOD_GROUP);
		removeRule request(ID)
	] 
}
